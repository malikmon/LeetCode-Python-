# LeetCode Question 78 Subsets
         []
  /          \     /
 [1]        [2]   [3]
 /  \        / 
[1,2] [1,3] [2,3]
/    
[1,2,3] 


[] --- [1] --- [1,2]  --- [1,2,3]
[] --- [2] --- [2,3]
[1] ---- [1,3]
[] --- [3]

class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        result = []
        def backtrack(current: List[int], index: int):
            # add the current to the list                                                  
            result.append(list(current))
            for i in range(index,len(nums)):
                # add num into current to generate a new combination
                current.append(nums[i])
                # call backtrack with the next element
                backtrack(current, i+1)
                current.pop()
        backtrack([],0)
        return result                                                 
                                                          
                                                                     
#         if len(nums) == 0:
#             return [[]]
#         res = [[]]
#         # for each num in nums, add that num into each sublist of existing result and add it to the result
#         for num in nums:
#             len_res = len(res)
#             for i in range(len_res):
#                 new_sub_lst = res[i] + [num]
#                 res.append(new_sub_lst)
#         return res
#     """
#     res = []
#     input = [1,2,3]
#     when num = 1
#     res = [[],[1]] ------ 2
#     when num = 2
#     res = [[],[1],[2],[1,2]] ------- 4
#     when num = 3
#     add 3 to each sublist of res
#      [[], [1] ,[2], [1,2]]
#            3   3 .  3 .   3
#     res = [ [], [1] ,[2], [1,2], [3],[1,3], [2,3], [1,2,3]
#     ]
#     """
# # Time Complexity O(n*2n)
# # Space Complexity O(n*2n)
# Video Prakash Shukla


********************************
90. Subsets II
class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        result = []
        # to get duplicates in an order
        nums.sort()
        def backtrack(current, index):
            result.append(list(current))
            for i in range(index, len(nums)):
                # check if next num is same as previous then skip the backtrack call and i > 0
                if (i > index and nums[i] == nums[i-1]):
                    continue
                current.append(nums[i])
                backtrack(current, i+1)
                current.pop()
        backtrack([],0)
        return result
    
    #Time Complexity O(n*2^n)
    #Space Complexity O(n*2^n) 
    # Video Prakash Shukla
